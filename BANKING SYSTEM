import json
import os

# File to store account data
DATA_FILE = "bank_accounts.json"

# Load existing accounts from file (if available)
def load_accounts():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    else:
        return {}

# Save accounts to file
def save_accounts(accounts):
    with open(DATA_FILE, 'w') as f:
        json.dump(accounts, f)

# Create a new account
def create_account(accounts):
    name = input("Enter your name: ")
    account_number = input("Enter a new account number: ")
    
    if account_number in accounts:
        print("Account number already exists! Try a different one.")
        return
    
    initial_deposit = float(input("Enter the initial deposit amount: "))
    
    accounts[account_number] = {
        'name': name,
        'balance': initial_deposit
    }
    save_accounts(accounts)
    print(f"Account created successfully for {name}. Your balance is ${initial_deposit:.2f}")

# Deposit money into an account
def deposit(accounts):
    account_number = input("Enter your account number: ")
    
    if account_number not in accounts:
        print("Account not found!")
        return
    
    deposit_amount = float(input("Enter the amount to deposit: "))
    accounts[account_number]['balance'] += deposit_amount
    save_accounts(accounts)
    print(f"Deposited ${deposit_amount:.2f}. New balance is ${accounts[account_number]['balance']:.2f}")

# Withdraw money from an account
def withdraw(accounts):
    account_number = input("Enter your account number: ")
    
    if account_number not in accounts:
        print("Account not found!")
        return
    
    withdraw_amount = float(input("Enter the amount to withdraw: "))
    
    if withdraw_amount > accounts[account_number]['balance']:
        print("Insufficient balance!")
        return
    
    accounts[account_number]['balance'] -= withdraw_amount
    save_accounts(accounts)
    print(f"Withdrew ${withdraw_amount:.2f}. New balance is ${accounts[account_number]['balance']:.2f}")

# Check balance of an account
def check_balance(accounts):
    account_number = input("Enter your account number: ")
    
    if account_number not in accounts:
        print("Account not found!")
        return
    
    balance = accounts[account_number]['balance']
    print(f"Account balance for {accounts[account_number]['name']}: ${balance:.2f}")

# Main banking system menu
def banking_system():
    accounts = load_accounts()
    
    while True:
        print("\n--- Banking System ---")
        print("1. Create Account")
        print("2. Deposit Money")
        print("3. Withdraw Money")
        print("4. Check Balance")
        print("5. Exit")
        
        choice = input("Choose an option (1-5): ")
        
        if choice == '1':
            create_account(accounts)
        elif choice == '2':
            deposit(accounts)
        elif choice == '3':
            withdraw(accounts)
        elif choice == '4':
            check_balance(accounts)
        elif choice == '5':
            print("Exiting the banking system. Goodbye!")
            break
        else:
            print("Invalid choice! Please choose again.")

# Run the banking system
if __name__ == "__main__":
    banking_system()
